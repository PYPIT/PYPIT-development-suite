#!/usr/bin/env python3
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""
This script builds the QL Masters
Execute it with:   ``./build_ql_masters`` after running the dev suite on 
`keck_nires` and `keck_mosfire`.
"""

import os
import shutil
import glob
import traceback

import argparse


def parser(options=None):

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('instrument', type=str, default="all", help='Instrument to generate quick look masters for. "'
                                                                    'Options are "keck_nires", "keck_mosfire", '
                                                                    'or "all". Defaults to "all".')
    parser.add_argument('setup', type=str, default="all", help='Instrument setup to generate quick look masters for. '
                                                               'Options depend on instrument. Defaults to "all".')
    parser.add_argument('--redux_dir', type=str, help='Full path to the REDUX dir; '
                                                      'default is REDUX_OUT in current directory')
    parser.add_argument('-o', '--output_dir', type=str,
                        help='Full path to the destination directory for the QL masters.'
                             'Defaults to the "QL_MASTERS" environment variable or "QL_MASTERS" in the current directory')
    parser.add_argument('-f', '--force_copy', help='Copy the files even if they already exist in the destination',
                        action='store_true', default=False)

    return parser.parse_args() if options is None else parser.parse_args(options)


def main():

    pargs = parser()

    # Set the redux_dir where the masters generated by the dev suite live.
    redux_dir = os.path.join(os.getcwd(), 'REDUX_OUT') if pargs.redux_dir is None \
                    else pargs.redux_dir

    # Set the output dir where the masters should be placed.
    if pargs.output_dir is None:
        if 'QL_MASTERS' in os.environ:
            ql_masters = os.environ['QL_MASTERS']
        else:
            ql_masters = 'QL_MASTERS'
    else:
        ql_masters = pargs.output_dir

    # Build the list of files to copy and where to copy them to.
    # This includes updating any filenames to match what the quicklook
    # scripts expect.
    source_files = []
    dest_files = []

    if pargs.instrument == 'all' or pargs.instrument == 'keck_nires':

        nires_dest_dir = os.path.join(ql_masters, 'NIRES_MASTERS')
        os.makedirs(nires_dest_dir, exist_ok=True)

        keck_nires_path = os.path.join(redux_dir, 'keck_nires', 'NIRES', 'Masters')
        source_files = glob.glob(os.path.join(keck_nires_path, '*2_01*'))
        dest_files = [os.path.join(nires_dest_dir, os.path.basename(x).replace('_2_','_1_')) for x in source_files]

        # A few more
        for root in ['MasterFlat_A_7_01.fits', 'MasterSlits_A_7_01.fits.gz']:
            source_files.append(os.path.join(keck_nires_path, root))
            dest_files.append(os.path.join(nires_dest_dir, root.replace('7','1')))

    if pargs.instrument == 'all' or pargs.instrument == 'keck_mosfire':
        files = ['Masters/MasterSlits_A_15_01.fits.gz',
                 'Masters/MasterTilts_A_4_01.fits', 
                 'Masters/MasterWaveCalib_A_4_01.fits',
                 'Science/spec1d_m191118_0064-GD71_MOSFIRE_2019Nov18T104704.507.fits',
                 'sens_m191118_0064-GD71_MOSFIRE_2019Nov18T104704.507.fits' ]

        dest_dir = os.path.join(ql_masters, 'MOSFIRE_MASTERS', 'Y')
        os.makedirs(dest_dir, exist_ok=True)
        for file in files:
            source_files.append(os.path.join(redux_dir, 'keck_mosfire', 'Y_long', file))
            dest_files.append(os.path.join(ql_masters, 'MOSFIRE_MASTERS', 'Y', os.path.basename(file)))

    # Copy the files
    for source_file, dest_file in zip(source_files, dest_files):
        copy_me(source_file, dest_file, pargs.force_copy)

    exit(0)

def copy_me(new_file, cooked_file, force_copy):
    """
    Simple script to copy a given file to a new file
    First compares that the new_file is newer than the
    cooked file (if the latter exists)

    Args:
        new_file: str
        cooked_file: str

    Returns:

    """
    # Compare date stamp
    doit = True
    if os.path.exists(cooked_file):
        # Time is in seconds total (like MJD)
        if os.path.getctime(cooked_file) > os.path.getctime(new_file):
            doit = False
    if doit or force_copy:
        shutil.copy2(new_file, cooked_file)
        print("Generated/over-wrote {:s}".format(cooked_file))

if __name__ == '__main__':
    # Giddy up
    main()

