#!/usr/bin/env python
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""
This script runs the PYPIT development suite of tests
"""

import argparse
import sys, os
import pdb


def main() :

    import subprocess
    import warnings
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('tests', type=str, default=None, help='Tests to run.  Options are: all, kast')
    parser.add_argument('-outputdir', type=str, help="Output folder.  Default is ./REDUX_OUT")

    pargs = parser.parse_args()

    all_tests = ['kast']

    # Grab a list of all instruments
    raw_data = 'RAW_DATA/'
    walk = os.walk(raw_data)
    all_instruments = next(walk)[1]

    # Setup
    if pargs.tests == 'all':
        instruments = all_instruments
    else:
        if pargs.tests == 'kast':
            instruments = [item for item in all_instruments if 'Kast' in item]
        else:
            raise IOError("Not prepared for this test: {:s}".format(pargs.tests))

    if pargs.outputdir is None:
        outputdir = 'REDUX_OUT/'
    else:
        outputdir = pargs.outputdir
    if not os.path.exists(outputdir):
        os.mkdir(outputdir)
    else:
        print("Output directory exists.")
    # Run
    pwd = os.getcwd()

    # Loop on instruments
    for instr in instruments:
        #if instr in ['Kast_blue','Kast_red']:  # For testing
        #    continue
        # Setups
        setups = next(os.walk(raw_data+'/'+instr))[1]
        for setup in setups:
            # Look for redux file in PYPIT
            redfile = 'pypit_files/'+instr.lower()+'_'+setup.lower()+'.pypit'
            if not os.path.exists(redfile):
                warnings.warn('No redux file: {:s}'.format(redfile))
                warnings.warn('Not testing..')
                continue
            # Edit data directory
            with open(redfile, 'r') as infile:
                lines = infile.readlines()
            for kk,iline in enumerate(lines):
                if 'data read' in iline:
                    dpth = lines[kk+1]
                    i0 = dpth.rfind('/')
                    newdpth = ' '+pwd+'/'+raw_data+'/'+instr+'/'+setup+dpth[i0:]
                    lines[kk+1] = newdpth
                elif 'reduce useflat' in iline:
                    cpth = lines[kk]
                    i0 = cpth.rfind('/')
                    pdb.set_trace()  # NEED TO ADD THE FOLLOWING FIRST
                    newcpth = 'PYPIT_CALIBS/'+cpth[i0:]
                    lines[kk] = 'reduce useflat '+newcpth
            # Generate folder as need be
            idir = outputdir+'/'+instr
            if not os.path.exists(idir):
                os.makedirs(idir)
            wdir = os.path.join(outputdir,instr,setup)
            if not os.path.exists(wdir):
                os.makedirs(wdir)
            # Write to TST_PYPIT
            outfile = wdir+'/'+instr.lower()+'_'+setup.lower()+'.pypit'
            pypfile = instr.lower()+'_'+setup.lower()+'.pypit'
            with open(outfile, 'w') as ofile:
                for iline in lines:
                    ofile.writelines(iline)
            # Run
            logfile = wdir+'/'+instr.lower()+'_'+setup.lower()+'.log2'
            print('Running pypit on {:s} --- '.format(outfile))
            with open(logfile,'w') as f:
                subprocess.call(['run_pypit', pypfile], stderr=f, cwd=wdir)#, shell=True)
            print('Done running pypit on {:s} --- '.format(outfile))
            subprocess.call(['tail', logfile])
            # Need some merit of success..



if __name__ == '__main__':
    # Check for pypit executable
    if not any(os.access(os.path.join(
            path, 'run_pypit'), os.X_OK) for path in os.environ["PATH"].split(os.pathsep)):
        raise RuntimeError("You need to install run_pypit in your PATH")
    # Giddy up
    main()
